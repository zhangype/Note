Spring Batch 将批处理程序分解为 Job 和 JobStep 两个部分。
将异常处理机制归结为跳过、重试、重启是三种类型。
将作业方式区分为多线程、并行、远程、分区四大特征。

Spring Batch 是一个批处理应用框架，不是调度框架。

Spring Batch 经典的三步走策略：
1、数据读
2、数据处理
3、数据写

Spring Batch 核心架构分为三层：应用层、核心层、基础架构层。
应用层：包含所有的批处理作业。
核心层：包含 Spring Batch 启动和控制所需的核心类，如：JobLauncher、Job和step等。
基础架构层：提供通用的读（ItemReader）、写（ItemWriter）和服务处理（如：RetryTemplate：重视模板；RepeatTemplate：重复模板，也可以被应用层和核心层使用）。

Spring Batch 框架支持作业的跳过、重试、重启能力，避免因错误导致导致批作业的异常的异常中断。
跳过（Skip）：通常在发生非致命异常的情况下，应该不中断批处理应用。
重试（Retry）：发生瞬态异常情况下，应该能够通过重试操作避免该类异常，保证批处理应用的连续性和稳定性。
重启（Restart）：当批处理应用因错误发生错误号，应该能够在最后执行失败的地方重新启动 Job 实例。

Spring Batch 框架通过并发和并行技术实现应用的横向、纵向扩展机制，满足数据处理性能的需要。
多线程执行一个 Step （Multithreaded step）。
多项城并行执行多个 Step （Parallelizing step）。
远程执行作业（Remote chunking）。
分区执行（Partitioning Step）。

Spring Batch 2.0 新特性：
支持 Java5
非顺序的 Step 支持
面向 Chunk 处理
强化元数据访问
增强扩展性
可配置

远程分块：
远程分块是一个吧 Step 进行技术分割的工作，它不需要对处理数据的结构有明确了解。任何输入源能够使用单进程读取并在动态分割后作为“块”发送给远程的工作进程。远程进程实现了监听者模式。

分区：
分区需要对数据的结构有一定的了解。这种模式有点在于分区中的每一个元素的处理器都能够像一个普通的 Spring Batch 任务的单步一样运行。分区理论上比远程分块更有拓展性，因为分区并不存在从一个地方读取所有输入数据并进行序列化的瓶颈。


每个作业 Job 有1个或者多个作业步 Step；每个 Step 对应一个 ItemReader、ItemProcessor、ItemWriter

面向Chunk的处理？



2.5.2 JUnit 单元测试