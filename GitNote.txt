1、Git 提供了一个叫做 git config 的工具（译注：实际是 git-config 命令，只不过可以通过 git 加一个名字来呼叫此命令。），专门用来配置或读取相应的工作环境变量。这些变量可以存放在以下三个不同的地方：
●/etc/gitconfig 文件：系统中对所有用户都普遍适用的配置。若使用 git config 时用--system 选项，读写的就是这个文件。
●~/.gitconfig 文件：用户目录下的配置文件只适用于该用户。若使用 git config 时用--global 选项，读写的就是这个文件。
●当前项目的 git 目录中的配置文件（也就是工作目录中的 .git/config 文件）：这里的配置仅仅针对当前项目有效。每一个级别的配置都会覆盖上层的相同配置，所以.git/config 里的配置会覆盖/etc/gitconfig 中的同名变量。

2、在 Windows 系统上，Git 会找寻用户主目录下的 .gitconfig 文件。主目录即 $HOME 变量指定的目录，一般都是C:\Documents and Settings\$USER。此外，Git 还会尝试找寻/etc/gitconfig 文件，只不过看当初 Git 装在什么目录，就以此作为根目录来定位。

3、如果用了 --global 选项，那么更改的配置文件就是位于你用户主目录下的那个，以后你所有的项目都会默认使用这里配置的用户信息。

4、查看配置信息：要检查已有的配置信息，可以使用 git config --list 命令：有时候会看到重复的变量名，那就说明它们来自不同的配置文件（比如 /etc/gitconfig 和 ~/.gitconfig），不过最终 Git 实际采用的是最后一个。

5、获取帮助：git help 

6、克隆并自定义仓库名称：git clone url myRepository

7、检查当前文件状态：git status

8、跟踪新文件：git add fileName（文件名）

9、把已跟踪的文件放到暂存区：git add fileName（文件名）。“git add”是一个 多功能命令：可以用它开始跟踪新文件，或者把已跟踪的文件放到暂存区，还能用于合并时把有冲突的文件标记为已解决状态等。可以理解为“添加内容到下一次提交中”。

10、状态简览：git status -s
●?? 标记：新添加的未跟踪文件
●A 标记：新添加到暂存区中的文件
●靠左边的M 标记：该文件被修改了但是还没放入暂存区
●靠右边的M 标记：该文件被修改了并放入了暂存区

11、忽略文件：可以创建一个名为 .gitignore 的文件，列出要忽略的文件模式。

12、查看差异：git diff。

13、提交更新：git commit。加上 -a 选项，Git 就会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过 git add 步骤。

14、移除文件：git rm。从已跟踪文件清单中移除。并连带从工作目录中删除指定的文件。如果想把文件从 Git 仓库中删除（亦即从暂存区域移除），但仍然希望保留在当前工作目录中，使用 --cached 选项。

15、移动文件：git mv file_from file_to。

16、查看提交历史：git log。
●一个常用的选项是 -p，用来显示每次提交的内容差异。也可以加上 -2 来仅显示最近两次提交。
●可以使用 --stat 选项，看到每次提交的简略的统计信息。
●--pretty，这个选项有一些内建的子选项供你使用。比如用 oneline 将每个提交放在一行显示，查看的提交数很大时非常有用。另外还有 short，full 和 fuller 可以用。例如git log --pretty=oneline。

17、撤消对文件的修改：git checkout -- [file]是一个危险的命令。你对那个文件做的任何修改都会消失,你只是拷贝了另一个文件来覆盖它。

18、查看远程仓库：git remote。查看已经配置的远程仓库服务器。指定选项-v，会显示需要读写远程仓库使用的Git保存的简写与其对应的URL。

19、添加远程仓库：git remote add <shortname> <url>。在命令行中，可以使用shortname替代整个url。如果你想拉取的仓库中有但你没有的信息，可以运行git fetch shortname。

20、从远程仓库中抓取与拉取：git fetch [remote-name]。这个命令会访问远程仓库，从中拉取所有你还没有的数据。 执行完成后，你将会拥有那个远程仓库中所有分支的引用，可以随时合并或查看。并不会自动合并或修改你当前的工作。

21、推送到远程仓库：git push [remote-name] [branch-name]。

22、查看远程仓库：git remote show [remote-name]。

23、远程仓库的移除与重命名：删除，git remote rm remote-name；重命名，git remote rename old_name new_name。

24、列出标签：git tag。Git使用两种主要类型的标签：轻量标签（lightweight）与附注标签（annotated）。
●轻量标签，像一个不会改变的分支，它只是一个特定提交的引用。
●附注标签，是存储在Git数据库中的一个完整对象。是可以被校验的；其中包含打标签者的名字、电子邮件地址、日期时间。

25、创建附注标签：git tag -a，例如：git tag -a v1.4 -m 'my version 1.4'。-m选项指定了一条将会存储在标签中的信息。如果没有为附注标签指定一条信息，Git会运行编辑器要求你输入信息。

26、创建轻量标签：不需要使用 -a、-s 或 -m 选项。例如，git tag v1.4-lw。

27、共享标签：默认情况下，git push命令并不会传送标签到远程仓库服务器上。在创建完标签后你必须显式地推送标签到共享服务器上。这个过程就像共享远程分支一样，可以运行 git push origin [tagname]。也可以使用带有 --tags 选项的git push 命令，将会把所有不在远程仓库服务器上的标签全部传送到过去。

28、检出标签：在 Git 中你并不能真的检出一个标签，因为它们并不能像分支一样来回移动。 如果想要工作目录与仓库中特定的标签版本完全一样，可以使用 git checkout -b [branchname] [tagname] 在特定的标签上创建一个新分支。

29、定义别名：git config --global alias.co checkout。当要输入git checkout时，只需要输入git co。

30、查看各个分支当前所指的对象：git log --oneline --decorate。

31、切换分支：git checkout branchname。

32、查看分叉历史：git log --oneline --decorate --graph --all。

33、删除分支：用带-d选项的git branch命令来删除分支。git branch -d branchname。

34、分支的合并：git merge mergedbranchname（被合并分支名称）。

35、使用图形化工具解决冲突：git mergetool。

36、git branch命令，如果不加任何参数运行它，会得到当前所有分支的一个列表。分支前的*字符。它代表现在检出的那一个分支（也就是说，当前HEAD指针所指向的分支）。

37、查看每一个分支的最后一次提交：git branch -v。

38、git branch，--merged与--no-merged这两个有用的选项可以过滤这个列表中已经合并或尚未合并到当前分支的分支。

39、推送分支：git push (remote) (branch)。

40、跟踪分支：git checkout -b [branch] [remotename]/[branch]。

41、修改正在跟踪的上游分支：git branch -u [remotename]/[branch]。

42、删除远程分支：运行带有--delete选项的git push命令。例如，git push origin --delete serverfix。