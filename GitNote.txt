1、Git 提供了一个叫做 git config 的工具（译注：实际是 git-config 命令，只不过可以通过 git 加一个名字来呼叫此命令。），专门用来配置或读取相应的工作环境变量。这些变量可以存放在以下三个不同的地方：
●/etc/gitconfig 文件：系统中对所有用户都普遍适用的配置。若使用 git config 时用--system 选项，读写的就是这个文件。
●~/.gitconfig 文件：用户目录下的配置文件只适用于该用户。若使用 git config 时用--global 选项，读写的就是这个文件。
●当前项目的 git 目录中的配置文件（也就是工作目录中的 .git/config 文件）：这里的配置仅仅针对当前项目有效。每一个级别的配置都会覆盖上层的相同配置，所以.git/config 里的配置会覆盖/etc/gitconfig 中的同名变量。

2、在 Windows 系统上，Git 会找寻用户主目录下的 .gitconfig 文件。主目录即 $HOME 变量指定的目录，一般都是C:\Documents and Settings\$USER。此外，Git 还会尝试找寻/etc/gitconfig 文件，只不过看当初 Git 装在什么目录，就以此作为根目录来定位。

3、如果用了 --global 选项，那么更改的配置文件就是位于你用户主目录下的那个，以后你所有的项目都会默认使用这里配置的用户信息。

4、查看配置信息：要检查已有的配置信息，可以使用 git config --list 命令：有时候会看到重复的变量名，那就说明它们来自不同的配置文件（比如 /etc/gitconfig 和 ~/.gitconfig），不过最终 Git 实际采用的是最后一个。

5、获取帮助：git help 

6、克隆并自定义仓库名称：git clone url myRepository

7、检查当前文件状态：git status

8、跟踪新文件：git add fileName（文件名）

9、把已跟踪的文件放到暂存区：git add fileName（文件名）。“git add”是一个 多功能命令：可以用它开始跟踪新文件，或者把已跟踪的文件放到暂存区，还能用于合并时把有冲突的文件标记为已解决状态等。可以理解为“添加内容到下一次提交中”。

10、状态简览：git status -s
●?? 标记：新添加的未跟踪文件
●A 标记：新添加到暂存区中的文件
●靠左边的M 标记：该文件被修改了但是还没放入暂存区
●靠右边的M 标记：该文件被修改了并放入了暂存区

11、忽略文件：可以创建一个名为 .gitignore 的文件，列出要忽略的文件模式。

12、查看差异：git diff。

13、提交更新：git commit。加上 -a 选项，Git 就会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过 git add 步骤。

14、移除文件：git rm。从已跟踪文件清单中移除。并连带从工作目录中删除指定的文件。如果想把文件从 Git 仓库中删除（亦即从暂存区域移除），但仍然希望保留在当前工作目录中，使用 --cached 选项。

15、移动文件：git mv file_from file_to。

16、查看提交历史：git log。
●一个常用的选项是 -p，用来显示每次提交的内容差异。也可以加上 -2 来仅显示最近两次提交。
●可以使用 --stat 选项，看到每次提交的简略的统计信息。
●--pretty，这个选项有一些内建的子选项供你使用。比如用 oneline 将每个提交放在一行显示，查看的提交数很大时非常有用。另外还有 short，full 和 fuller 可以用。例如git log --pretty=oneline。

17、撤消对文件的修改：git checkout -- [file]是一个危险的命令。你对那个文件做的任何修改都会消失,你只是拷贝了另一个文件来覆盖它。

18、查看远程仓库：git remote。查看已经配置的远程仓库服务器。指定选项-v，会显示需要读写远程仓库使用的Git保存的简写与其对应的URL。

19、添加远程仓库：git remote add <shortname> <url>。在命令行中，可以使用shortname替代整个url。